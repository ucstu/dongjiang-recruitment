name: Integrate Frontend

on:
  workflow_call:
    inputs:
      node-version:
        description: "Node.js version"
        required: false
        default: 18
        type: string
      pnpm-version:
        description: "PNPM version"
        required: false
        default: 7.26.3
        type: string
      working-directory:
        description: "Working directory"
        required: true
        type: string
      product-prefix:
        description: "Product prefix"
        required: true
        type: string
      package-list:
        description: "Package list"
        required: true
        type: string
      environment:
        description: "Environment"
        required: true
        type: string
      previous-ref:
        description: "Previous ref"
        required: true
        type: string
      current-ref:
        description: "Latest ref"
        required: true
        type: string
      temp-tag:
        description: "Temporary tag"
        required: true
        type: string
    outputs:
      package-list:
        description: "Package list"
        value: ${{ inputs.package-list }}
      environment:
        description: "Environment"
        value: ${{ inputs.environment }}
      previous-ref:
        description: "Previous ref"
        value: ${{ inputs.previous-ref }}
      current-ref:
        description: "Latest ref"
        value: ${{ inputs.current-ref }}

env:
  NODE_VERSION: ${{ inputs.node-version }}
  PNPM_VERSION: ${{ inputs.pnpm-version }}
  WORKING_DIRECTORY: ${{ inputs.working-directory }}
  PRODUCT_PREFIX: ${{ inputs.product-prefix }}

jobs:
  test-projects:
    name: Test
    runs-on: ubuntu-latest
    env:
      WORKING_DIRECTORY: ${{ format('{0}/{1}', inputs.working-directory, matrix.package-name) }}
    defaults:
      run:
        working-directory: ${{ format('{0}/{1}', inputs.working-directory, matrix.package-name) }}
    strategy:
      fail-fast: false
      matrix:
        package-name: ${{ fromJson(inputs.package-list) }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Set up PNPM
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      - name: Set up Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            ${{ github.workspace }}/node_modules
            ${{ env.WORKING_DIRECTORY }}/node_modules
          key: ${{ runner.os }}-node-pnpm-${{ hashFiles(format('{0}/pnpm-lock.yaml', github.workspace)) }}
      - name: Install Dependencies
        run: pnpm install --frozen-lockfile
      - name: Test Project
        run: echo "no test for ${{ matrix.package-name }}"

  build-projects:
    name: Build
    runs-on: ubuntu-latest
    env:
      WORKING_DIRECTORY: ${{ format('{0}/{1}', inputs.working-directory, matrix.package-name) }}
    defaults:
      run:
        working-directory: ${{ format('{0}/{1}', inputs.working-directory, matrix.package-name) }}
    strategy:
      fail-fast: false
      matrix:
        package-name: ${{ fromJson(inputs.package-list) }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Set up PNPM
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      - name: Set up Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            ${{ github.workspace }}/node_modules
            ${{ env.WORKING_DIRECTORY }}/node_modules
          key: ${{ runner.os }}-node-pnpm-${{ hashFiles(format('{0}/pnpm-lock.yaml', github.workspace)) }}
      - name: Install Dependencies
        run: pnpm install --frozen-lockfile
      - name: Prepare to Build
        run: pnpm --filter @dongjiang-recruitment/vite-config run build
      - name: Build Project
        run: |
          bash -c '[ '${{ matrix.package-name }}' == 'applicant-interface' ] && \
          npx -y concurrently -n h5,mp-weixin,app -c bgGreen,bgYellow,bgBlue \
          "pnpm build:h5" "pnpm build:mp-weixin" "pnpm build:app" || \
          pnpm build'
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PRODUCT_PREFIX }}-${{ matrix.package-name }}
          path: ${{ format('{0}/dist/{1}*', env.WORKING_DIRECTORY, matrix.package-name == 'applicant-interface' && 'build/' || '') }}
