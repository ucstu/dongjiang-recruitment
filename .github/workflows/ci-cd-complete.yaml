name: CI/CD Complete

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
    types:
      - opened
      - synchronize
      - reopened

env:
  NODE_VERSION: 18.14.0
  PNPM_VERSION: 7.27.0

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      detect-results: ${{ steps.github-script.outputs.detect-results }}
      changed-packages: ${{ steps.github-script.outputs.changed-packages }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/github-script@v6
        id: github-script
        with:
          script: await require(".github/workflows/monorepo-scripts/detect-changes.js")({ github, context, core, fetch })

  lint-packages:
    name: Lint Packages
    runs-on: ubuntu-latest
    needs: detect-changes
    strategy:
      fail-fast: false
      matrix:
        package-name: ${{ fromJson(needs.detect-changes.outputs.changed-packages).*.name }}
    outputs:
      detect-results: ${{ needs.detect-changes.outputs.detect-results }}
      changed-packages: ${{ needs.detect-changes.outputs.changed-packages }}
    if: ${{ fromJson(needs.detect-changes.outputs.detect-results).has-changed-packages }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/github-script@v6
        id: github-script
        env:
          CURRENT_SCRIPT: lint
          CURRENT_PACKAGE: ${{ matrix.package-name }}
          DETECT_RESULTS: ${{ needs.detect-changes.outputs.detect-results }}
        with:
          script: await require(".github/workflows/monorepo-scripts/export-variables.js")({ core })
      - name: Setup Pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm
      - name: Install Dependencies
        run: pnpm install --frozen-lockfile
      - name: Lint Package
        working-directory: ${{ steps.github-script.outputs.workspace }}
        run: ${{ steps.github-script.outputs.command }}

  build-packages:
    name: Build Packages
    runs-on: ubuntu-latest
    needs: detect-changes
    strategy:
      fail-fast: false
      matrix:
        package-name: ${{ fromJson(needs.detect-changes.outputs.changed-packages).*.name }}
    outputs:
      detect-results: ${{ needs.detect-changes.outputs.detect-results }}
      changed-packages: ${{ needs.detect-changes.outputs.changed-packages }}
    if: ${{ fromJson(needs.detect-changes.outputs.detect-results).has-changed-packages }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/github-script@v6
        id: github-script
        env:
          CURRENT_SCRIPT: build
          CURRENT_PACKAGE: ${{ matrix.package-name }}
          DETECT_RESULTS: ${{ needs.detect-changes.outputs.detect-results }}
        with:
          script: await require(".github/workflows/monorepo-scripts/export-variables.js")({ core })
      - name: Setup Pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm
      - name: Install Dependencies
        run: pnpm install --frozen-lockfile
      - name: Build Package
        working-directory: ${{ steps.github-script.outputs.workspace }}
        run: ${{ steps.github-script.outputs.command }}
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ format('{0}-{1}', steps.github-script.outputs.type, matrix.package-name) }}
          path: ${{ format('{0}/{1}', steps.github-script.outputs.workspace, steps.github-script.outputs.artifact) }}

  publish-packages:
    name: Publish Packages
    runs-on: ubuntu-latest
    needs: [lint-packages, build-packages]
    permissions:
      contents: write
      packages: write
    strategy:
      fail-fast: false
      matrix:
        package-name: ${{ fromJson(needs.lint-packages.outputs.changed-packages || needs.build-packages.outputs.changed-packages).*.name }}
    if: ${{ fromJson(needs.lint-packages.outputs.detect-results || needs.build-packages.outputs.detect-results).need-publish }}
    outputs:
      detect-results: ${{ needs.lint-packages.outputs.detect-results || needs.build-packages.outputs.detect-results }}
      changed-packages: ${{ needs.lint-packages.outputs.changed-packages || needs.build-packages.outputs.changed-packages }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/github-script@v6
        id: github-script
        env:
          CURRENT_SCRIPT: publish
          CURRENT_PACKAGE: ${{ matrix.package-name }}
          DETECT_RESULTS: ${{ needs.lint-packages.outputs.detect-results || needs.build-packages.outputs.detect-results }}
        with:
          script: await require(".github/workflows/monorepo-scripts/export-variables.js")({ core })
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ format('{0}-{1}', steps.github-script.outputs.type, matrix.package-name) }}
          path: ${{ format('{0}/{1}', steps.github-script.outputs.workspace, steps.github-script.outputs.artifact) }}
      - name: Set Up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login To GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish Docker images
        uses: docker/build-push-action@v3
        with:
          context: ${{ format('{0}/{1}', steps.github-script.outputs.workspace, steps.github-script.outputs.context) }}
          file: ${{ format('{0}/{1}', steps.github-script.outputs.workspace, steps.github-script.outputs.docker-file) }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true
          build-args: |
            NODE_ENV=production
            NODE_VERSION=${{ env.NODE_VERSION }}
          tags: |
            ${{ format('ghcr.io/{0}/{1}-{2}:{3}', github.repository, steps.github-script.outputs.type, matrix.package-name, github.sha) }}
            ${{ format('ghcr.io/{0}/{1}-{2}:{3}', github.repository, steps.github-script.outputs.type, matrix.package-name, steps.github-script.outputs.publish-version) }}
            ${{ steps.github-script.outputs.need-release && format('ghcr.io/{0}/{1}-{2}:latest', github.repository, steps.github-script.outputs.type, matrix.package-name) }}

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [lint-packages, build-packages]
    permissions:
      contents: write
    if: ${{ fromJson(needs.lint-packages.outputs.detect-results || needs.build-packages.outputs.detect-results).need-release }}
    outputs:
      detect-results: ${{ needs.lint-packages.outputs.detect-results || needs.build-packages.outputs.detect-results }}
      changed-packages: ${{ needs.lint-packages.outputs.changed-packages || needs.build-packages.outputs.changed-packages }}
    steps:
      - uses: actions/checkout@v3
      - name: Download All Artifacts
        uses: actions/download-artifact@v3
        with:
          path: ${{ format('{0}/{1}', github.workspace, 'artifacts') }}
      - uses: actions/github-script@v6
        id: github-script
        env:
          DETECT_RESULTS: ${{ needs.lint-packages.outputs.detect-results || needs.build-packages.outputs.detect-results }}
        with:
          script: |
            const { join } = require('path')
            const { execSync } = require('child_process')
            const { readdirSync, lstatSync } = require('fs')
            const exportResults = await require(".github/workflows/monorepo-scripts/export-variables.js")({ core })
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/v${exportResults['current-version']}`,
              sha: context.sha,
            })
            const artifactsPath = join(process.env.GITHUB_WORKSPACE, 'artifacts')
            const artifacts = readdirSync(artifactsPath)
            artifacts.forEach(artifact => {
              const stat = lstatSync(join(artifactsPath, artifact))
              if (stat.isDirectory()) {
                execSync(`zip -r ${artifact}.zip . && mv ${artifact}.zip ${artifactsPath}`, {
                  cwd: join(artifactsPath, artifact)
                })
              }
            })
      - name: Generate Release Changelog
        uses: heinrichreimer/github-changelog-generator-action@v2.3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          sinceTag: ${{ steps.github-script.outputs.previous-version && format('v{0}', steps.github-script.outputs.previous-version) }}
          dueTag: v${{ steps.github-script.outputs.current-version }}
          output: CHANGELOG.md
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.github-script.outputs.current-version }}
          body_path: CHANGELOG.md
          files: |
            ${{ format('{0}/{1}', github.workspace, 'artifacts/*.zip') }}
